!*****************************************************!
!*          SEISCOPE OPTIMIZATION TOOLBOX            *!
!*****************************************************!
! This file contains the routine for printing the     !
! convergence history in the files iterate_TRN.dat    !
! and iterate_TRN_CG.dat                              !
! The file iterate_TRN.dat is similar to the          !
! convergence history files of the other optimization !
! routines of the toolbox (PSTD,PNLCG,LBFGS,PLBFGS)   !
! The file iterate_TRN_CG.dat contains additional     !
! information on the convergence of the inner         !
! conjugate gradient iteration for the computation of !
! the inexact Newton descent direction.               !
!------------------------------------------------------
! INPUT : integer n dimension                         !
!         real,dimension(n) grad current gradient     !
!         character*4 FLAG communication flag         !
! INPUT/OUTPUT : optim_type optim (data structure)    !
!-----------------------------------------------------!
subroutine print_info_TRN(n,optim,fcost,FLAG)

  implicit none
  include 'optim_type.h'  

  !IN
  character*4 :: FLAG
  integer :: n
  real :: fcost
  type(optim_type) :: optim !data structure   
  !Local variables
  integer :: unit

  if(optim%print_flag.eq.1) then
     if (optim%myid_w == 0) then
        if(FLAG.eq.'INIT') then   
           optim%fname_1 = 'iterate_TRN.dat'
           call open_file(optim%fname_1)
           write(unit,'(A90)') '******************************************************************************************'
           write(unit,'(A70)') '                                 TRUNCATED NEWTON ALGORITHM                               '
           write(unit,'(A90)') '******************************************************************************************'
           write(unit,'(A30,ES10.2)') '     Convergence criterion  : ',optim%conv
           write(unit,'(A30,I7)')     '     Niter_max              : ',optim%niter_max
           write(unit,'(A30,ES10.2)') '     Initial cost is        : ',optim%f0
           write(unit,'(A30,ES10.2)') '     Initial norm_grad is   : ',optim%norm_grad
           write(unit,'(A30,I7)')     '     Maximum CG iter        : ',optim%niter_max_CG
           write(unit,'(A90)') '******************************************************************************************'
           write(unit,'(A10,A10,A10,A10,A12,A12,A8,A10,A9,A9)')&
                '   Niter   ' ,&
                '   fk      ' ,&
                '   ||gk||  ' ,&
                '     fk/f0   ' ,&
                '       alpha   ' ,&
                '        nls     ',&
                '  nit_CG',&
                '    eta     ',&
                '  ngrad ',&
                '  nhess '
           write(unit,'(I6,ES12.2,ES12.2,ES12.2,ES12.2,I8,I8,ES12.2,I8,I8)') &
                optim%cpt_iter,&
                fcost,&
                optim%norm_grad,&
                fcost/optim%f0,&
                optim%alpha,&
                optim%cpt_ls,&
                optim%cpt_iter_CG,&
                optim%eta,&
                optim%nfwd_pb,&
                optim%nhess
           close(unit)
           optim%fname_2 = 'iterate_TRN_CG.dat'
           call open_file(optim%fname_2)
           write(unit,'(A90)') '******************************************************************************************'
           write(unit,'(A70)') '                                 TRUNCATED NEWTON ALGORITHM                               '
           write(unit,'(A70)') '                                      INNER CG HISTORY                                    '
           write(unit,'(A90)') '******************************************************************************************'
           write(unit,'(A30,ES10.2)') '     Convergence criterion  : ',optim%conv
           write(unit,'(A30,I7)')     '     Niter_max              : ',optim%niter_max
           write(unit,'(A30,ES10.2)') '     Initial cost is        : ',optim%f0
           write(unit,'(A30,ES10.2)') '     Initial norm_grad is   : ',optim%norm_grad
           write(unit,'(A30,I7)')     '     Maximum CG iter        : ',optim%niter_max_CG
           write(unit,'(A90)') '******************************************************************************************'
           close(unit)
        elseif(FLAG.eq.'CONV') then    
           call open_file(optim%fname_1)
           write(unit,'(A70)') '**********************************************************************'
           if(optim%cpt_iter.eq.optim%niter_max) then
              write(unit,'(A50)') '  STOP: MAXIMUM NUMBER OF ITERATION REACHED    '
           else
              write(unit,'(A50)') '  STOP: CONVERGENCE CRITERION SATISFIED        '
           endif
           write(unit,'(A70)') '**********************************************************************'
           close(unit)
        elseif(FLAG.eq.'FAIL') then
           call open_file(optim%fname_1)
           write(unit,'(A70)') '**********************************************************************'
           write(unit,'(A50)') '  STOP: LINESEARCH FAILURE    '
           write(unit,'(A70)') '**********************************************************************'
           close(unit)     
        elseif(optim%comm.eq.'DESC') then
           if(optim%CG_phase.eq.'INIT') then
              call open_file(optim%fname_2)
              write(unit,'(A90)') '-------------------------------------------------------------------------------------------------'
              write(unit,'(A20,I4,A10,ES12.2)') ' NONLINEAR ITERATION ',optim%cpt_iter, ' ETA IS : ',optim%eta
              write(unit,'(A90)') '-------------------------------------------------------------------------------------------------'
              write(unit,'(A12,A10,A10,A20)')&
                   '  Iter_CG      ',&
                   '  qk           ',&
                   ' norm_res     ',&
                   ' norm_res/||gk||  '
              write(unit,'(I8,ES12.2,ES12.2,ES12.2)') &
                   optim%cpt_iter_CG,&
                   optim%qk_CG,&
                   optim%norm_residual,&
                   optim%norm_residual/optim%norm_grad       
              close(unit)
           else
              call open_file(optim%fname_2)
              write(unit,'(I8,ES12.2,ES12.2,ES12.2)') &
                   optim%cpt_iter_CG,&
                   optim%qk_CG,&
                   optim%norm_residual,&
                   optim%norm_residual/optim%norm_grad
              close(unit)
           endif
        else
           call open_file(optim%fname_1)
           write(unit,'(I6,ES12.2,ES12.2,ES12.2,ES12.2,I8,I8,ES12.2,I8,I8)') &
                optim%cpt_iter,&          
                fcost,&
                optim%norm_grad,&
                fcost/optim%f0,&
                optim%alpha,&
                optim%cpt_ls,&
                optim%cpt_iter_CG,&
                optim%eta,&
                optim%nfwd_pb,&
                optim%nhess
           close(unit)
        endif
     endif
  end if

contains

  subroutine open_file(fname)
    
    character (len=20), intent(in) :: fname
    
    if(FLAG.eq.'INIT') then
       open(newunit=unit, file=trim(fname), status='REPLACE', action='WRITE', access='SEQUENTIAL', position='APPEND')
    else
       open(newunit=unit, file=trim(fname), status='OLD',     action='WRITE', access='SEQUENTIAL', position='APPEND')
    end if
  end subroutine open_file

end subroutine print_info_TRN

