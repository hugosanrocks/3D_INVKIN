! Viscoacoustic forward-backward simulation with generalized Maxwell body 
! (3 mechanisms): Checkpointing assisted reverse-forward simulation (CARFS)
!!$========================================================================== 
!!$ Copyright (C) 2016-2018 Seiscope Consortium
!!$
!!$ Author: Pengliang Yang, Univ. Grenoble Alpes
!!$ Email: pengliang.yang@univ-grenoble-alpes.fr
!!$---------------------------------------------------------------------------
!!$  This program is free software; you can redistribute it and/or modify
!!$  it under the terms of the GNU General Public License as published by
!!$  the Free Software Foundation; either version 2 of the License, or
!!$  (at your option) any later version.
!!$  
!!$  This program is distributed in the hope that it will be useful,
!!$  but WITHOUT ANY WARRANTY; without even the implied warranty of
!!$  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!!$  GNU General Public License for more details.
!!$  
!!$  You should have received a copy of the GNU General Public License
!!$  along with this program; if not, write to the Free Software
!!$  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
!!$
!!$  
!!$ References: 
!!$ [1] Yang, P., Brossier, R., Metivier, L. and Virieux, J. (2016), Wavefield 
!!$   reconstruction in attenuating media: A Checkpointing-assisted 
!!$   reverse-forward simulation method, Geophysics,  Vol. 81, No. 6, 
!!$   pp. R349–R362
!!$ [2] Yang, P., Brossier, R., and Virieux, J. (2016). Wavefield reconstruction
!!$   from significantly decimated boundaries. Geophysics, Vol. 81, No. 5,
!!$   T197–T209
!!$ [3] Yang, P., Gao, J., and Wang, B. (2014a). RTM using effective boundary 
!!$    saving: A staggered grid GPU implementation. Computers & Geosciences,
!!$    68:64–72.
!!$========================================================================== 
program gmbva_carfs
  use gmbva
  implicit none

  logical::verb
  integer :: it,kt1,kt2, nt,mt,r, nz, nx, nb, sx, sz,L,K,itm1
  integer :: ierr,nc,ic,xtr,ztr,i,j,itt, cpsteps=0
  real  :: dt, dz, dx, amp, fm, vpmax, tmp, idx, idz, dtb, tolerance,wmin,wmax
  real, dimension (:),   allocatable :: wlt,bb,ef,eb,trf,trb,wl,w
  real, dimension (:,:), allocatable :: Q0,v0, vv,rho, kappa,p,vz,vx,err1,err2
  real, dimension (:,:,:), allocatable :: xil,yl
  complex, dimension(:,:,:,:),allocatable::bvzt,bvzb,bvxl,bvxr
  integer, dimension(:), allocatable :: cpit
  type(checkpoint),dimension(:),allocatable ::cp
  real,parameter::PI=3.14159265359

  ! Read/Write axes
  nz=301
  nx=301
  dz=4
  dx=4 
  nb=25
  dt=0.001
  nt=1000
  kt1=200
  kt2=500
  dtb=4*dt
  tolerance=0.01
  nc=nint(log(real(nt))/log(2.))
  L=3; K=2*L-1
  wmin=2.
  wmax=20.
  amp=1.
  fm=wmax/2.5
  verb=.true.
  xtr=100
  ztr=100

  idx=1./dx
  idz=1./dz
  sx=(nx+1)/2
  sz=(nz+1)/2
  wmin=2*PI*wmin
  wmax=2*PI*wmax
  r=nint(dtb/dt)
  if(mod(nt,r)==0) then
     write(0,*) 'store boundary every r-step: r=', r
     mt=nt/r !N=nt;M=mt; M=N/r
  else
     write(0,*) 'dt for boundary saving is chosen inappropriately.'
     call exit(0)
  endif

  allocate(wlt(nt))
  allocate(bb(nb))
  allocate(v0(nz,nx))
  allocate(Q0(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(vv(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(rho(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(kappa(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(yl(-nb+1:nb+nz,-nb+1:nb+nx,L))
  allocate(p(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(vz(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(vx(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(xil(-nb+1:nb+nz,-nb+1:nb+nx,L))
  allocate(wl(L))
  allocate(w(K))
  allocate(bvzt(mt/2+1,-1:1,1:nx,1),stat=ierr)
  allocate(bvzb(mt/2+1,-1+nz:1+nz,1:nx,1),stat=ierr)
  allocate(bvxl(mt/2+1,1:nz,-1:1,1),stat=ierr)
  allocate(bvxr(mt/2+1,1:nz,-1+nx:1+nx,1),stat=ierr)
  if (ierr /= 0) stop 'Error: Allocation failed!'
  allocate(ef(nt))
  allocate(eb(nt))
  allocate(trf(nt))
  allocate(trb(nt))
  allocate(cp(0:nc-1))
  allocate(cpit(0:nc-1))
  call checkpoint_init(cp,nc,nt,nz,nx,nb,L)
  allocate(err1(nz,nx))
  allocate(err2(nz,nx))

  !generate ricker wavelet with a delay
  do it=1,nt
     tmp=PI*fm*((it-1)*dt-1.0/fm)
     tmp=tmp*tmp
     wlt(it)=amp*(1.0-2.0*tmp)*exp(-tmp)
  enddo
  v0=2000.
  vpmax=maxval(v0)
  call check_sanity(vpmax, dt, dx, dz)
  call expand2d(vv, v0, nz, nx, nb)
  rho=1000.
  call expand2d(rho, rho(1:nz,1:nx), nz, nx, nb)
  call sponge_coeff(bb,vpmax,dx,dt,nb)
  kappa=rho*vv*vv
  p=0.
  vx=0.
  vz=0.
  xil=0.
  !------------------------------------------------------------------!
  !initialize the allocated memory for DFT coefficients with zeros
  !------------------------------------------------------------------!
  bvxl=0.;bvxr=0.
  bvzt=0.;bvzb=0.
  trf=0.
  trb=0.
  !specify frequencies in logarithmic equaldistance
  do i=1,L
     wl(i)=wmin*(wmax/wmin)**(real(i-1.)/real(L-1.))
  enddo
  do i=1,K
     w(i)=wmin*(wmax/wmin)**(real(i-1.)/real(K-1.))
  enddo
  Q0=60.
  call expand2d(Q0, Q0(1:nz,1:nx), nz, nx, nb)
!  call lsq_model(verb,Q0(1:nz,1:nx),Yl(1:nz,1:nx,:),wl,w,L,K,nz,nx)
  call lsq_valhall2d(verb,Q0(1:nz,1:nx),Yl(1:nz,1:nx,:),wl,w,L,K,nz,nx)
  do i=1,L
    call expand2d(Yl(:,:,i), Yl(1:nz,1:nx,i), nz, nx, nb)
  enddo
  write(0,*) "Q least-squares done!"


  !forward modeling
  ic=0
  call checkpoint_relocate(verb,cpit,nc,ic,nt-1)
  do it=1,nt
     itm1=it-1
     if(verb) write(0,*) "forward: it=", it

     call add_sources(p, dt, wlt(it), sz, sx,nz,nx,nb)
     call step_forward_v(p, vz, vx, rho, dt, idz, idx,nz,nx,nb)
     call apply_sponge(vz,bb,nz,nx,nb) 
     call apply_sponge(vx,bb,nz,nx,nb) 
     call step_forward_p(p,vz,vx,kappa,xil,yl,wl,dt,idz,idx,nz,nx,nb,L)
     call apply_sponge(p,bb,nz,nx,nb) 
     do i=1,L
        call apply_sponge(xil(:,:,i),bb,nz,nx,nb) 
     enddo
     cpsteps=cpsteps+1
     !record snapshots to restart reverse propagation
     if(ic<nc.and.itm1==cpit(ic)) then
        cp(ic)%p=p
        cp(ic)%vz=vz
        cp(ic)%vx=vx       
        cp(ic)%xil=xil
        ic=ic+1 !index of the snapshot/cp
     endif

     call compute_energy(ef(it),vz(1:nz,1:nx),vx(1:nz,1:nx),p(1:nz,1:nx),&
          rho(1:nz,1:nx),kappa(1:nz,1:nx),nz,nx)
     !-----------------------------------------------------------------------!
     !decimation sampling: flag v2b=.true.
     !-----------------------------------------------------------------------!
     call dft_interp(.true.,bvzt,vz(-1:1,1:nx),-1,1,1,nx,1,1,nt,mt,it)
     call dft_interp(.true.,bvzb,vz(-1+nz:1+nz,1:nx),-1+nz,1+nz,1,nx,1,1,nt,mt,it)
     call dft_interp(.true.,bvxl,vx(1:nz,-1:1),1,nz,-1,1,1,1,nt,mt,it)
     call dft_interp(.true.,bvxr,vx(1:nz,-1+nx:1+nx),1,nz,-1+nx,1+nx,1,1,nt,mt,it)


     !record a random trace for reconstruction checking
     trf(it)=p(ztr,xtr)

     if(it==kt1) then
        call window2d(err1, p, nz, nx, nb)
        open(10,file='forw_kt1.bin',access='direct',recl=4*nz*nx,status='replace')
        write(10,rec=1) err1
        close(10)
     endif
     if(it==kt2) then
        call window2d(err2, p, nz, nx, nb)
        open(10,file='forw_kt2.bin',access='direct',recl=4*nz*nx,status='replace')
        write(10,rec=1) err2
        close(10)
     endif
  enddo

  ! store forward energy history
  open(10,file='ef.bin',access='direct',recl=4*nt,status='replace')
  write(10,rec=1) ef
  close(10)
  !store the trace recorded in forward simulation
  open(10,file='trf.bin',access='direct',recl=4*nt,status='replace')
  write(10,rec=1) trf
  close(10)

  !backward reconstruction/reverse propagation
  trb(nt)=trf(nt)
  eb(nt)=ef(nt)
  do it=nt-1,1,-1     
     itm1=it-1
     if(verb) write(0,*) "backward: it=",it

     !find the closesest checkpoint prior to current time level-itm1
     ic=nc-1
     do while(ic>=0 .and. itm1<cpit(ic))
        ic=ic-1
     enddo
     !after searching cpit(ic) is the closest checkpoint location 
     !prior or equal to current time level-itm1: itm1>=cpit(ic)

     if(itm1>cpit(ic)) then ! itm1 is not checkpoint, try reverse propagation from boundary reading
        call step_forward_p(p,vz,vx,kappa,xil,yl,wl,-dt,idz,idx,nz,nx,nb,L)
        call step_forward_v(p, vz, vx, rho, -dt, idz, idx,nz,nx,nb)
        call add_sources(p, -dt, wlt(it+1), sz, sx,nz,nx,nb)
        cpsteps=cpsteps+1
        !----------------------------------------------------------------------!
        !reconstruct wavefield boundaries by DFT interpolation: flag v2b=.fasle.
        !----------------------------------------------------------------------!
        call dft_interp(.false.,bvzt,vz(-1:1,1:nx),-1,1,1,nx,1,1,nt,mt,it)
        call dft_interp(.false.,bvzb,vz(-1+nz:1+nz,1:nx),-1+nz,1+nz,1,nx,1,1,nt,mt,it)
        call dft_interp(.false.,bvxl,vx(1:nz,-1:1),1,nz,-1,1,1,1,nt,mt,it)
        call dft_interp(.false.,bvxr,vx(1:nz,-1+nx:1+nx),1,nz,-1+nx,1+nx,1,1,nt,mt,it)
        call compute_energy(eb(it),vz(1:nz,1:nx),vx(1:nz,1:nx),p(1:nz,1:nx),&
             rho(1:nz,1:nx),kappa(1:nz,1:nx),nz,nx)

        !check the measure satisfying the tolerance or not
        if(abs(ef(it)-eb(it))>tolerance*ef(it)) then 
           !now, itm1 is not checkpoint because checkpoints satisfy the tolerance
           !itm1 is a moment: itm1>cpit(ic)
           !read the closest checkpoints into the wavefield state vector
           p=cp(ic)%p
           vz=cp(ic)%vz
           vx=cp(ic)%vx
           xil=cp(ic)%xil

           !then evenly distribute idle checkpoints between cpit(ic)+1:itm1
           !the idle checkpoint are [ic:nc-1]
           call checkpoint_relocate(verb,cpit,nc,ic,itm1)

           !modeling from the closest checkpoint prior to current time level
           j=1
           do itt=cpit(ic)+1,itm1
              call add_sources(p, dt, wlt(itt+1), sz, sx,nz,nx,nb)
              call step_forward_v(p, vz, vx, rho, dt, idz, idx,nz,nx,nb)
              call apply_sponge(vz,bb,nz,nx,nb) 
              call apply_sponge(vx,bb,nz,nx,nb) 
              call step_forward_p(p,vz,vx,kappa,xil,yl,wl,dt,idz,idx,nz,nx,nb,L)
              call apply_sponge(p,bb,nz,nx,nb) 
              do i=1,L
                 call apply_sponge(xil(:,:,i),bb,nz,nx,nb) 
              enddo
              cpsteps=cpsteps+1
              !store (nc-ic) snapshots into the idle checkpoints on the fly
              !they may be used later
              do while(ic+j<nc.and.itt==cpit(ic+j)) 
                 !itm1 is possible that several checkpoints resides in the same positm1ion
                 cp(ic+j)%p=p
                 cp(ic+j)%vz=vz
                 cp(ic+j)%vx=vx
                 cp(ic+j)%xil=xil
                 j=j+1
              enddo
           enddo

           !the checkpoint computed wavefield is free of error
           !thus, the energy is the same as forward simulation
           !eb(itm1)=ef(itm1)
           call compute_energy(eb(it),vz(1:nz,1:nx),vx(1:nz,1:nx),p(1:nz,1:nx),&
                rho(1:nz,1:nx),kappa(1:nz,1:nx),nz,nx)
        endif
     elseif (itm1==cpit(ic)) then ! if itm1 is checkpoint, read from memory
        p=cp(ic)%p
        vz=cp(ic)%vz
        vx=cp(ic)%vx
        xil=cp(ic)%xil
        eb(it)=ef(it)
     endif

     !record a random trace for checking the reconstruction
     trb(it)=p(ztr,xtr)

     if(it==kt1) then
        call window2d(v0, p, nz, nx, nb)
        err1=err1-v0
        open(10,file='err_kt1.bin',access='direct',recl=4*nz*nx,status='replace')
        write(10,rec=1) err1
        close(10)
     endif
     if(it==kt2) then
        call window2d(v0, p, nz, nx, nb)
        err2=err2-v0
        open(10,file='err_kt2.bin',access='direct',recl=4*nz*nx,status='replace')
        write(10,rec=1) err2
        close(10)
     endif
  enddo
  !store backward energy history
  open(10,file='eb.bin',access='direct',recl=4*nt,status='replace')
  write(10,rec=1) eb
  close(10)
  !store the trace recorded in backward simulation
  open(10,file='trb.bin',access='direct',recl=4*nt,status='replace')
  write(10,rec=1) trb
  close(10)

  write(0,*) "Number of forward timestepping in checkpointing:",cpsteps
  write(0,*) "Recomputation ratio/Slowdown factor:",real(cpsteps)/real(nt)

  deallocate(wlt)
  deallocate(bb)
  deallocate(ef)
  deallocate(eb)
  deallocate(wl)
  deallocate(w)
  deallocate(v0)
  deallocate(vv)
  deallocate(rho)
  deallocate(kappa)
  deallocate(yl)
  deallocate(p)
  deallocate(vz)
  deallocate(vx)  
  deallocate(xil)
  deallocate(bvzt)
  deallocate(bvzb)
  deallocate(bvxl)
  deallocate(bvxr)
  deallocate(trf)
  deallocate(trb)  
  call checkpoint_free(cp,nc)
  deallocate(cp)
  deallocate(err1)
  deallocate(err2)

  call exit(0)
end program gmbva_carfs

