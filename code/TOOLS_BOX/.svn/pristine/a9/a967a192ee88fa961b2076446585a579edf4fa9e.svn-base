!
!!$  Copyright (C) 2015 University Joseph Fourier, Grencle (Pengliang Yang)
!!$
!!$ References: 
!!$[1] P. Yang and R. Brossier and L. Metivier and J. Virieux, Checkpointing
!!$    assisted Reverse Forward Simulation: an optimal recomputation method for 
!!$    FWI and RTM, Expanded Abstracts, 78$^{th}$ Annual EAGE Meeting (Vienna),
!!$    2016
!!$[2] Yang, P., Brossier, R., and Virieux, J. (2016b). Wavefield reconstruction
!!$    from significantly decimated boundaries. Geophysics, page submitted.
!!$[3] Yang, P., Gao, J., and Wang, B. (2014a). RTM using effective boundary 
!!$    saving: A staggered grid GPU implementation. Computers & Geosciences,
!!$    68:64–72.
!!$[4] Yang, P., Gao, J., and Wang, B. (2015). A graphics processing unit 
!!$    implementation of time-domain full-waveform inversion. Geophysics, 
!!$    80(3):F31–F39.
!!$[5] Yang, P., Wang, B., and Gao, J. (2014b). Using the effective boundary 
!!$    saving strategy in GPU-based RTM programming. In SEG technical program 
!!$    expanded abstracts 2014. Society of Exploration Geophysicists.
module gmbva
  ! module for generalized Maxwell body based viscoacoustics hybrid forward
  ! backward checkpointing scheme
  implicit none

  type checkpoint
     real, dimension(:,:), allocatable :: p,vz,vx
     real, dimension(:,:,:), allocatable :: xil
  end type checkpoint
contains
  !----------------------------------------------------------------------------
  !initialize checkpoint cps
  subroutine checkpoint_init(cp,nc,nt,nz,nx,nb,L)    
    integer::nc, nt,nz,nx,nb,L
    type(checkpoint),dimension(:),allocatable::cp

    integer::ic,ierr
    !set checkpoints/snapshots, allocate and initialize variables at each checkpoint
    do ic=0,nc-1
       !allocate memory for the ic-th cp to store snapshots
       allocate(cp(ic)%p(-nb+1:nb+nz,-nb+1:nb+nx),stat=ierr)
       allocate(cp(ic)%vz(-nb+1:nb+nz,-nb+1:nb+nx),stat=ierr)
       allocate(cp(ic)%vx(-nb+1:nb+nz,-nb+1:nb+nx),stat=ierr)
       allocate(cp(ic)%xil(-nb+1:nb+nz,-nb+1:nb+nx,L),stat=ierr)
       if (ierr /= 0) stop 'Error: Allocation failed!'

       cp(ic)%p=0.
       cp(ic)%vz=0.
       cp(ic)%vx=0.
       cp(ic)%xil=0.
    enddo
  end subroutine checkpoint_init

  !----------------------------------------------------------------------------
  !free checkpoint cps
  subroutine checkpoint_free(cp,nc)
    integer::nc,ic
    type(checkpoint),dimension(:),allocatable::cp
    do ic=0,nc-1
       deallocate(cp(ic)%p)
       deallocate(cp(ic)%vz)
       deallocate(cp(ic)%vx)
       deallocate(cp(ic)%xil)
    enddo
  end subroutine checkpoint_free
  !----------------------------------------------------------------------------
  ! check the CFL/stability condition is satisfied or not
  subroutine check_sanity(vpmax,dt,dx,dz)
    implicit none

    real::vpmax,dt,dx,dz
    real CFL

    CFL=vpmax*dt/max(dx,dz)*sqrt(2.)*7./6.

    if (CFL>=1.) then 
       write(0,*)'do NOT satisfy CFL condition, CFL=',CFL
       call exit(0)
    else
       write(0,*)'CFL=',CFL
    endif
  end subroutine check_sanity

  !----------------------------------------------------------------------------
  subroutine apply_sponge(p,bndr,nz,nx,nb)
    implicit none

    integer::nb,nz,nx
    real,dimension(nb)::bndr
    real,dimension(-nb+1:nb+nz,-nb+1:nb+nx)::p

    integer::ib,i1,i2

    do i2=-nb+1,nb+nx
       do i1=-nb+1,0 !top
          ib=i1+nb
          p(i1,i2)=bndr(ib)*p(i1,i2)
       enddo
       do i1=nz+1,nz+nb !bottom
          ib=nz+nb-i1+1
          p(i1,i2)=bndr(ib)*p(i1,i2)
       enddo
    enddo
    do i1=-nb+1,nz+nb
       do i2=-nb+1,0!left
          ib=i2+nb
          p(i1,i2)=bndr(ib)*p(i1,i2)
       enddo
       do i2=nx+1,nb+nx !right
          ib=nx+nb-i2+1
          p(i1,i2)=bndr(ib)*p(i1,i2)
       enddo
    enddo
  end subroutine apply_sponge

  !----------------------------------------------------------------------------
  ! expand the model with artificial boundaries
  subroutine expand2d(tgt, src, nz, nx, nb)
    implicit none

    integer::i1,i2
    integer::nz,nx,nb
    real::tgt(-nb+1:nb+nz,-nb+1:nb+nx),src(nz,nx)

    !first copy from source to inner part of target
    do i2=1,nx
       do i1=1,nz
          tgt(i1,i2)=src(i1,i2)
       enddo
    enddo
    !then pad the boundaries
    do i2=-nb+1,nb+nx
       do i1=-nb+1,0
          tgt(i1,i2)=tgt(1,i2)
       enddo
       do i1=1,nb
          tgt(i1+nz,i2)=tgt(nz,i2)
       enddo
    enddo
    do i1=-nb+1,nb+nz
       do i2=-nb+1,0
          tgt(i1,i2)=tgt(i1,1)
       enddo
       do i2=1,nb
          tgt(i1,i2+nx)=tgt(i1,nx)
       enddo
    enddo
  end subroutine expand2d

  !----------------------------------------------------------------------------
  !window the inner part from the expanded model
  !the source is assumed to be larger in size than the target
  subroutine window2d(tgt, src, nz, nx, nb)
    implicit none

    integer::nz, nx, nb
    real::src(-nb+1:nb+nz,-nb+1:nb+nx),tgt(nz,nx)

    integer::i1, i2
    do i2=1,nx
       do i1=1,nz
          tgt(i1,i2)=src(i1,i2)
       enddo
    enddo
  end subroutine window2d

  !----------------------------------------------------------------------------
  ! initialize PML damping profile
  subroutine sponge_coeff(bb,vpmax,dx,dt,nb)
    implicit none

    integer::nb
    real::dt,dx,vpmax
    real,dimension(nb)::bb

    integer::ib
    real::x,L,d0,d,ratio
    real,parameter::Rc=1.e-4

    L=nb*dx
    d0=-3.*log(Rc)*vpmax/(2.*L)

    do ib=1,nb
       x=(nb-ib)*dx     !x=1.-cos(0.5*(nb-ib)*PI/nb)
       ratio=x/L        ! ratio of x over L
       d=d0*ratio**2
       bb(ib)=exp(-d*dt)
    enddo
  end subroutine sponge_coeff

  !----------------------------------------------------------------------------
  subroutine step_forward_v(p, vz, vx, rho, dt, idz, idx, nz, nx, nb)
    implicit none

    integer::i1, i2
    real::diff1,diff2

    integer:: nz, nx, nb
    real::idz,idx,dt
    real,dimension(-nb+1:nb+nz,-nb+1:nb+nx)::p, vz, vx, rho

    real,parameter::c1=1.125
    real,parameter::c2=-1./24.

    !$omp parallel do default(none)&
    !$omp schedule(dynamic) &
    !$omp private(i1,i2,diff1,diff2) &
    !$omp shared(dt,idz,idx,nz,nx,nb,p,vz,vx,rho)
    do i2=-nb+2,nx+nb-2
       do i1=-nb+2,nz+nb-2
          diff1=c1*(p(i1+1,i2)-p(i1,i2))&
               +c2*(p(i1+2,i2)-p(i1-1,i2))
          diff2=c1*(p(i1,i2+1)-p(i1,i2))&
               +c2*(p(i1,i2+2)-p(i1,i2-1))
          vz(i1,i2)=vz(i1,i2)+dt*idz*diff1/rho(i1,i2)
          vx(i1,i2)=vx(i1,i2)+dt*idx*diff2/rho(i1,i2)
       enddo
    enddo
    !$omp end parallel do 
  end subroutine step_forward_v

  !----------------------------------------------------------------------------
  subroutine step_forward_p(p,vz,vx,kappa,xil,yl,wl,dt,idz,idx,nz,nx,nb,L)
    implicit none

    integer::nz,nx,nb,L
    real::idz,idx,dt,wl(L)
    real,dimension(-nb+1:nb+nz,-nb+1:nb+nx)::p, vz, vx, kappa
    real,dimension(-nb+1:nb+nz,-nb+1:nb+nx,L)::xil,yl
    real,parameter::c1=1.125
    real,parameter::c2=-1./24.

    integer::i,i1, i2
    real::tmp,diff1,diff2,summ,tmpxi(L)

    !$omp parallel do default(none) &
    !$omp schedule(dynamic) &
    !$omp private(i,i1,i2,diff1,diff2,tmp,tmpxi,summ) &
    !$omp shared(dt,idz,idx,nz,nx,nb,p,vz,vx,kappa,yl,wl,xil,L)
    do i2=-nb+3,nx+nb-1
       do i1=-nb+3,nz+nb-1
          diff1=c1*(vz(i1,i2)-vz(i1-1,i2))&
               +c2*(vz(i1+1,i2)-vz(i1-2,i2))
          diff2=c1*(vx(i1,i2)-vx(i1,i2-1))&
               +c2*(vx(i1,i2+1)-vx(i1,i2-2))
          tmp=idz*diff1+idx*diff2
          summ=0.
          do i=1,L
             tmpxi(i)=xil(i1,i2,i)
             xil(i1,i2,i)=exp(-wl(i)*dt)*tmpxi(i)+(1.-exp(-wl(i)*dt))*tmp
             tmpxi(i)=0.5*(tmpxi(i)+xil(i1,i2,i))
             summ=summ+tmpxi(i)*yl(i1,i2,i)
          enddo
          p(i1,i2)=p(i1,i2)+dt*kappa(i1,i2)*(tmp-summ)
       enddo
    enddo
    !$omp end parallel do
  end subroutine step_forward_p

  !----------------------------------------------------------------------------
  subroutine add_sources(p, dt, wlt, sz, sx, nz, nx, nb)
    implicit none

    integer::sz,sx,nz,nx,nb
    real::dt,wlt
    real,dimension(-nb+1:nb+nz,-nb+1:nb+nx)::p

    p(sz,sx)=p(sz,sx)+dt*wlt
  end subroutine add_sources

  !----------------------------------------------------------------------------
  subroutine compute_energy(e,vz,vx,p,rho,kappa,nz,nx)
    !compute the sum of kinematic energy and deformation/potential energy
    implicit none

    integer::nz,nx
    real::e
    real,dimension(1:nz,1:nx)::rho,kappa,p,vz,vx

    e=0.5*sum(rho*(vz*vz+vx*vx)+p*p/kappa)
  end subroutine compute_energy
end module gmbva
