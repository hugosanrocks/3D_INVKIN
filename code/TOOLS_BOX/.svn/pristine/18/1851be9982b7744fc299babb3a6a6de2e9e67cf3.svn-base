program ug_test_tetra_seq

  use dd_common_mod
  use mesh_readers_mod
  use mesh_writers_mod
  use tetra_mesh_graphs_mod
  use ref_dof_mod
  use mat_csr_mod
  use glob_dof_mod
  !use ifport

  implicit none


  character(len = 100)                             :: iFileName, oFileName
  character(len = 1024)                            :: exec
  integer                                          :: nV, nE, nF, nEdeg, nFdeg, nFtag, nEtag, ndof, nvar, nterm, nEdof
  real,                dimension(:,:), allocatable :: coorV
  integer,             dimension(:,:), allocatable :: EtoV, FtoE, EtoF, EtoE, FtoV, FtagtoV
  integer,             dimension(:),   allocatable :: Ftag, Etag, FtagtoF, FtagNew, EtagtoE, EtagNew, PkE
  type(ref_dof_t),     dimension(:),   allocatable :: ref_dof
  real(kind=FP),       dimension(:,:), allocatable :: coordof,Jacobian_2D
  integer,             dimension(:),   allocatable :: Etodof_adj
  real(kind=FP),       dimension(:),   allocatable :: weight_vol
  real(kind=FP),       dimension(:),   allocatable :: drdx, drdy, drdz
  real(kind=FP),       dimension(:),   allocatable :: dsdx, dsdy, dsdz
  real(kind=FP),       dimension(:),   allocatable :: dtdx, dtdy, dtdz
  real(kind=FP),       dimension(:,:,:), allocatable :: normal
  type(mat_csr_t)                                  :: mat
  real(kind=FP),       dimension(:),   allocatable :: A
  integer,             dimension(:),   allocatable :: nPk
  integer                                          :: nb_args, Pkmax, Pkmin, ie, irow, j1, jend, k
  real                                             :: time_end = 0., time_begin = 0., time0 = 0.
  character(len=3)                                 :: str1
  character(len=20)                                :: fmt1
  integer(4)                                       :: iargc ! declare function for xlf compiler

  dd_debug_level = 0
  debug_graph    = 1

  ! read parameters: input filename
  call getarg(0, exec)
  nb_args = iargc()
  if (nb_args /= 1) then
    write(6,*) "ERROR : bad number of arguments :", nb_args
    write(6,*) "command line : ug_test_tetra_seq[_gnu] filename"
    stop
  end if
  call getarg(1, iFileName)

  write(6,*)
  write(6,*) "-----------------------------------------"
  write(6,*) "Start ug_test_tetra_seq : "
  write(6,*) "-----------------------------------------"
  write(*,*) ' filename = ', iFileName
  write(6,*) "-----------------------------------------"
  write(6,*)
  !print *, selected_int_kind(8), huge(0_4)

  call cpu_time(time0)

  Pkmin = 1
  Pkmax = 3

  nvar = 1
  nterm = 1

  !==============================================================================
  call build_ref_dof(Pkmax, ref_dof)
  !==============================================================================

  call cpu_time(time_begin)
  !==============================================================================
  call read_medit_mesh (iFileName, &
  &                     nV, coorV, nE, nEdeg, EtoV, Etag, nFtag, nFdeg, FtagtoV, Ftag)
  !==============================================================================
  call cpu_time(time_end)
  write(*,*)
  write(*,*) 'read_medit_mesh: Total time (seconds) = ', REAL(time_end - time_begin)
  write(*,*)

  call cpu_time(time_begin)
  !==============================================================================
  call build_tetra_face_graph(nV, nE, nEdeg, EtoV, nFtag, FtagtoV, Ftag, &
  &                     nF, FtoV, FtoE, FtagtoF, FtagNew               )
  !==============================================================================
  call cpu_time(time_end)
  write(*,*)
  write(*,*) 'build_face_graph: Total time (seconds) = ', REAL(time_end - time_begin)
  write(*,*)

  call cpu_time(time_begin)
  !==============================================================================
  call build_tetra_element_to_face_graph(nE, nEdeg, nF, FtoE, Etag, &
  &                                EtoF, EtoE, nEtag, EtagtoE, EtagNew)
  !==============================================================================
  call cpu_time(time_end)
  write(*,*)
  write(*,*) 'build_element_graph: Total time (seconds) = ', REAL(time_end - time_begin)
  write(*,*)

  ! Assign order to each element... Hard-coded for test
  call alloc_(nPk, 0, Pkmax, 'nPk')
  call alloc_(PkE, 1, nE,    'PkE')
  do ie = 1, nE
    k       = mod(ie, Pkmax-Pkmin) + Pkmin
    !k       = int(rand()*Pkmax)
    PkE(ie) = k
    nPk(k)  = nPk(k) + 1
  end do

  if (debug_graph > 0) then
    write(*,*)
    write(*,*) 'Element order:'
    do ie = 1, nE
      write(*,'(A,I3,A,I3)') ' ie = ',  ie, ' order = ', PkE(ie)
    end do
    write(*,*)
  end if

  write(*,*)
  write(*,*) 'Element order statistics:'
  do k = 0, Pkmax
    write(*,'(A,I3,A,I12)') ' order = ',  k, ' nb Elements = ', nPk(k)
  end do
  write(*,*)

  call cpu_time(time_begin)
  !==============================================================================
  call build_glob_dof(ref_dof, nV, nF, nFdeg, nE, nEdeg, coorV, EtoV, EtoE, PkE, & 
       &                   ndof, coordof, Etodof_adj, weight_vol, drdx, drdy, drdz, &
       &                                        dsdx, dsdy, dsdz, dtdx, dtdy, dtdz, &
       &                                                        normal, jacobian_2D)
  !==============================================================================
  call cpu_time(time_end)
  write(*,*)
  write(*,*) 'build_glob_dof: Total time (seconds) = ', REAL(time_end - time_begin)
  write(*,*)

  call cpu_time(time_begin)
  !==============================================================================
  call init_dof_CSR_matrix(nvar, nterm, ndof, nF, nFdeg, nE, nEdeg, EtoF, FtoE, EtoE, Etodof_adj, ref_dof, PkE, &
  &                        mat)
  !==============================================================================
  call cpu_time(time_end)
  write(*,*)
  write(*,*) 'init_dof_CSR_matrix: Total time (seconds) = ', REAL(time_end - time_begin)
  write(*,*)

  call cpu_time(time_begin)
  !==============================================================================
  call fill_dof_CSR_matrix(ndof, nF, nFdeg, nE, nEdeg, nvar, EtoF, FtoE, PkE, Etodof_adj, coordof, &
  &                        mat, A)
  !==============================================================================
  call cpu_time(time_end)
  write(*,*)
  write(*,*) 'fill_dof_CSR_matrix: Total time (seconds) = ', REAL(time_end - time_begin)
  write(*,*)
  
  if (debug_graph > 0) then
    write(*,*)
    write(*,*) 'CSR matrix values:'
    write(*,*)
    do irow = 1, mat%n
      j1 = mat%IA(irow)
      jend = mat%IA(irow+1) - 1
      write(str1,'(I3)') jend-j1+1
      fmt1 = '(A,I8,A,' // str1 // 'F8.4)'
      write(*,fmt1) ' row = ', irow, ' A =', A((j1-1)*nvar+1:jend*nvar)
    end do
    write(*,*)
  end if

  oFileName = 'out.mesh'
  !==============================================================================
  call write_medit_mesh(oFileName, &
  & nV, coorV, &
  & nE, nEdeg, EtoV, Etag, &
  & nF, nFdeg, FtoV, &
  & nFtag, FtagtoF, Ftag)
  !==============================================================================

  ! Free memory
  !------------
  ! TO DO

  call cpu_time(time_end)
  write(6,*)
  write(6,*) "-----------------------------------------"
  write(6,*) "ug_test_tetra_seq successfully ended : "
  write(*,*) 'Total time (seconds) = ', REAL(time_end - time0)
  write(6,*) "-----------------------------------------"
  write(6,*)

  contains


  subroutine fill_dof_CSR_matrix(ndof, nF, nFdeg, nE, nEdeg, nvar, EtoF, FtoE, PkE, Etodof_adj, coordof, &
  &                              mat, A)
    integer,                                          intent(in)     :: ndof, nF, nE, nFdeg, nEdeg, nvar
    integer,             dimension(:,:), allocatable, intent(in)     :: EtoF, FtoE
    integer,             dimension(:),   allocatable, intent(in)     :: PkE
    integer,             dimension(:),   allocatable, intent(in)     :: Etodof_adj
    real(kind=FP),       dimension(:,:), allocatable, intent(in)     :: coordof
    type(mat_csr_t),                                  intent(in out) :: mat
    real(kind=FP),       dimension(:),   allocatable, intent(in out) :: A

    character(len = *),                               parameter      :: proc_name = "fill_dof_CSR_matrix"
    integer                                                          :: ie, i, idof, idof1, idofend, nEdof, j, jdof, k, npf
    integer                                                          :: ifacref, ifac, k_nghb, npf_nghb, ifacref_nghb, ie_nghb
    real(kind=FP),       dimension(nvar)                             :: aij

    if (dd_debug_level > 0) then
      write(*,*) myid, " : ", proc_name
    endif

    if (nEdeg /= 4) then
      write(*,*) proc_name, " :: ERROR : function not implemented for non tetrahedron elements"
      return
    end if

    call alloc_(A, 1, nvar*mat%nnz, 'matrix A')

    do ie = 1, nE

      ! 1/ Add contribution of neighbors involved in volumic integration (dof of element x dof of element)
      idof1   = Etodof_adj(ie)
      idofend = Etodof_adj(ie+1) - 1
      nEdof   = idofend - idof1 + 1
      do idof = idof1, idofend

        do jdof = idof1, idofend

          if (idof == jdof) then ! diagonal term
            aij(:) = real(nEdof, FP) ! For test

          else
            aij(:) = real(nEdof, FP) ! For test

          end if

          call add_csr_mat(mat, A, aij, idof, jdof, nvar, mat%nnz)

        end do ! jdof = idof1, idofend
      end do ! idof = idof1, idofend

      k   = PkE(ie)
      npf = ref_dof(k)%npf

      ! 2/ Add contribution of neighbours involved in surfacic integration of fluxes computations
      ! - (dof of face of element x dof of face of element)
      ! + (dof of face of element x dof of adjacent faces of adjacent elements)
      do ifacref = 1, 4
        ifac = EtoF(ifacref, ie)

        ! Retrieve the neighbour element index
        ie_nghb = sum(FtoE(1:2,ifac)) - ie

        if (ie_nghb > 0) then

          k_nghb   = PkE(ie_nghb)

          if (k_nghb > 0) then

            npf_nghb = ref_dof(k_nghb)%npf
            ifacref_nghb = sum(FtoE(3:4,ifac)) - ifacref

            do j = 1, npf

              ! Retrieve global indices of dofs of the current element that are linked to this face: 
              ! first index of dofs linked to the current element + iterator on dofs of the reference face
              jdof = Etodof_adj(ie) + ref_dof(k)%Ftodof(j,ifacref) - 1

              do i = 1, npf_nghb

                ! Retrieve global indices of dofs of the neighbour element that are linked to this face: 
                idof = Etodof_adj(ie_nghb) + ref_dof(k_nghb)%Ftodof(i,ifacref_nghb) - 1

                aij(:) = real(npf_nghb, FP) ! For test

                call add_csr_mat(mat, A, aij, jdof, idof, nvar, mat%nnz)
    
              end do ! i = 1, npf_nghb
            end do ! j = 1, npf
          end if ! (k_nghb > 0) 
        end if ! (ie_nghb > 0)
      end do ! ifacref = 1, 4
    end do ! ie = 1, nE

  end subroutine fill_dof_CSR_matrix

end program ug_test_tetra_seq
