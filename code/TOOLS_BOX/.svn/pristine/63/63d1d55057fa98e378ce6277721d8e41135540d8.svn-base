!------------------------------------------------------------------------------------
subroutine Time_evol_acoustic()

  use global_parameters_mod

  implicit none
  
  ! temporary arrays for optimization purpose
  call allocate_working_arrays(ndof_local, ndof_local_face)

  !call build_init_condition !! DEBUG
  !call take_pressure_x_snapshot !! DEBUG

  ntime=int(time_simu/delta_t)
  current_time = 0._fp

!!$  if (myrank == 0) then
     write(*,*)
     write(*,*) '     Begin Time Loop  ' 
     write(*,*)
     write(*,*) ' Number steps :', ntime
     write(*,*) ' Time step    :', delta_t
     write(*,*)
!!$  end if

  !! TIME STEPPING 
  do it= 1, ntime

     !!
     current_time = current_time + delta_t

  
     if (mod(it,100) == 0 ) then
        write(*,'(10x,i5,1x,a1,1x,i5,1x,a1,f5.2,a2)') it ,'/', ntime,'[',(real(it)/real(ntime))*100.,'%]'
        call take_pressure_x_snapshot_ac
        call take_pressure_y_snapshot_ac
     end if


     !! acoustic kernel
     call LSERK_acoustic(ndof_local)
     
  end do

  

end subroutine Time_evol_acoustic

!-----------------------------------------------------------------------------------------


subroutine LSERK_acoustic(np)

  !!
  !! ORDER 4 LOW STORAGE RUNGE KUTTA TIME SCHEME
  !!

  use global_parameters_mod
  implicit none
  integer irk, np
  real(kind=fp) current_time_rk

 

  do irk=1, 5

     !! initialisation of rhs vector
     stress_rhs(:,:,:)=0._fp
     veloc_rhs(:,:,:)=0._fp

     !! time sub-stepping 
     current_time_rk = current_time + rk4c(irk)*delta_t

     !! compute right hand side
     call acoustic_rhs

!!$     !! just for temporary mpi
!!$     stress_rhs_reduce(:,:,:)=0._fp
!!$     veloc_rhs_reduce(:,:,:)=0._fp
!!$     call mpi_reduce(stress_rhs,stress_rhs_reduce,ndof_local*nE,MPI_REAL,MPI_SUM,0,MPI_COMM_WORLD,ierr)
!!$     call mpi_reduce(veloc_rhs,veloc_rhs_reduce, 3*ndof_local*nE,MPI_REAL,MPI_SUM,0,MPI_COMM_WORLD,ierr)
!!$     call mpi_bcast(stress_rhs_reduce,ndof_local*nE,MPI_REAL,0,MPI_COMM_WORLD,ierr)
!!$     call mpi_bcast(veloc_rhs_reduce,3*ndof_local*nE,MPI_REAL,0,MPI_COMM_WORLD,ierr)
!!$
!!$     stress_rhs(:,:,:)= stress_rhs_reduce(:,:,:)
!!$     veloc_rhs(:,:,:)=veloc_rhs_reduce(:,:,:)
!!$     !!! end naive mpi

     !! add source 
     call add_pressure_ricker_source(Am_stf, Fm_stf, current_time_rk, np)
     
     !! update stress field 
     stress_res(:,:,:) = rk4a(irk) * stress_res(:,:,:) + delta_t*stress_rhs(:,:,:)
     stress(:,:,:) =  stress(:,:,:) +  rk4b(irk) *stress_res(:,:,:)
     
     !! update veloc field
     veloc_res(:,:,:) = rk4a(irk) * veloc_res(:,:,:) + delta_t*veloc_rhs(:,:,:)
     veloc(:,:,:) =  veloc(:,:,:) +  rk4b(irk) *veloc_res(:,:,:)
    

  end do

  !! output seismograms 
!!$  if (myrank == 0) 
  call write_sismogram_ac(np)

end subroutine LSERK_acoustic

!-----------------------------------------------------------------------------------------------

subroutine acoustic_rhs()

  ! compute rigth hand side for velocity-pressure acoustic wave equation 


  use global_parameters_mod
  implicit none 
  integer  :: ie, np, npf 
  

  k = norder_simu
  npf = ndof_local_face
  np =  ndof_local



! loop on elements

  do ie = 1, nE 
     !write(*,*) 'myrank ', ie, irecmin, irecmax
     
     ! compute field jump accross elements boundary
     call acoustic_field_jump(ie, npf)
     
     ! compute flux rhs (attention : need to do it first because of rhs vector initialisation)
     call compute_acoustic_upwind_flux_working_copy(ie, np, npf)
     !call compute_acoustic_upwind_flux(ie, np, npf)

     ! apply derivation operators on fields and add it to rhs vector 
     Dr_x(:,:)=Drx(:,:,ie)
     Dr_y(:,:)=Dry(:,:,ie)
     Dr_z(:,:)=Drz(:,:,ie)
!!$     write(*,*) myrank, ie,Dr_x(1,1) 
     call compute_acoustic_derivative(ie, np)
     

  end do



end subroutine acoustic_rhs

!--------------------------------------------------------------------------------------------------------------

subroutine initialise_acoustic_fields()
  use global_parameters_mod
  use dd_common_mod
  use mem_alloc_mod
  implicit none

  
  write(*,*) 'Allocate Acoustic fields ' 

  call alloc_(veloc,  1, 3, 1, ndof_local, 1, nE, 'velocity field')
  call alloc_(stress, 1, 1, 1, ndof_local, 1, nE, 'pressure field')
  call alloc_(veloc_rhs,  1, 3, 1, ndof_local, 1, nE, 'velocity field rhs')
  call alloc_(stress_rhs, 1, 1, 1, ndof_local, 1, nE, 'pressure field rhs')
  call alloc_(veloc_res,  1, 3, 1, ndof_local, 1, nE, 'velocity field res')
  call alloc_(stress_res, 1, 1, 1, ndof_local, 1, nE, 'pressure field res')
  
!!$  call alloc_(veloc_rhs_reduce,  1, 3, 1, ndof_local, 1, nE, 'velocity field rhs')
!!$  call alloc_(stress_rhs_reduce, 1, 1, 1, ndof_local, 1, nE, 'pressure field rhs')

  veloc(:,:,:) = 0._FP
  stress(:,:,:) = 0._FP
  veloc_rhs(:,:,:) = 0._FP
  stress_rhs(:,:,:) = 0._FP
  veloc_res(:,:,:) = 0._FP
  stress_res(:,:,:) = 0._FP
  

end subroutine initialise_acoustic_fields
!--------------------------------------------------------------------------------------------------------------

subroutine allocate_working_arrays(np,npf)

  use global_parameters_mod
  use dd_common_mod
  use mem_alloc_mod
  implicit none
  integer :: np, npf

  write(*,*) 'Allocate Working arrays '
  call alloc_(vector1, 1, 4*npf,  'vector1')
  call alloc_(vector2, 1, 4*npf,  'vector2')
  call alloc_(matrix1, 1, np, 1, 4*npf,  'matrix1')
  call alloc_(matrix2, 1, np, 1, 4*npf,  'matrix2')
  call alloc_(matrix3, 1, np, 1, 4*npf,  'matrix3')
  call alloc_(matrix4, 1, np, 1, 4*npf,  'matrix4')
  call alloc_(tmp_work_vector,1,9, 1, np, '(tmp_work_vector' )




end subroutine allocate_working_arrays

!--------------------------------------------------------------------------------------------------------------
subroutine acoustic_field_jump(ie, npf)

  !! comupte field jump accross  boundaries between elements 
  !! will be used for flux computation

  !! note : this routine is not optimal and may be a bottleneck 

  use global_parameters_mod
  implicit none 
  integer, intent(in)   :: ie, npf 
  integer   :: indx, ifacref, ie_nghb
  integer   :: l,idof_local, ne_dof_local
  integer   :: my_dof_local
  integer   :: indx_permutted, iface_1 
  integer   :: renumerotation_faces(4)
  logical   :: tagged_face


  !! CHANGE NUMEROTATION CONVENTION (it's for debbuging)
  !! our convention -> Hesthaven's convention
  renumerotation_faces(1)=3
  renumerotation_faces(2)=4
  renumerotation_faces(3)=2 
  renumerotation_faces(4)=1
  

  indx = 0

  ! order of current element
  k=PkE(ie)

  ! loop on faces 
  do ifacref = 1, 4

     ! numerotaion used in local matrices 
     iface_1 = renumerotation_faces(ifacref)

     ! global face numerotation
     ifac = EtoF(ifacref, ie)

     ! Retrieve the neighbour element index 
     ie_nghb = sum(FtoE(1:2,ifac)) - ie

     ! test for free surface (if here NOT OPTIMAL)
     tagged_face=.false.
     if(EtoFtag(ifacref, ie) /=0 ) tagged_face=.true.
     
     ! neighbourg element
     if (ie_nghb > 0) then ! (if here NOT OPTIMAL)
   
        do l=1,npf  !! loop over our face

           !! next dof
           indx =indx + 1

           !! new order to consider in local matrices 
           indx_permutted = l + npf*(iface_1 - 1) 

           !! retrieve dof numerotation
           idof_local=ref_dof(k)%Ftodof(l,ifacref) 
           idof=Etodof_adj(ie) + idof_local - 1    

           !! outward normal
           nx(indx_permutted)=normal(1,idof, ifacref)
           ny(indx_permutted)=normal(2,idof, ifacref)
           nz(indx_permutted)=normal(3,idof, ifacref)
           
           !! SURFACE of ifacref
           Jface(indx_permutted) = 0.5_fp * Jacobian_2D(idof,ifacref) / weight_vol(idof) 

           !! physical parameters 
           TauV(indx_permutted)= 0.5_fp * (rho(ie)*vp(ie) + rho(ie_nghb)*vp(ie_nghb))
           TauP(indx_permutted)= 1._fp / TauV(indx_permutted)

           !! retrieve local dof numerotaion
           my_dof_local = dof_dof(ie)%my_local_dof(l,ifacref)  
           ne_dof_local = dof_dof(ie)%nei_local_dof(l,ifacref) 
           
           ! compute stress jump accross interface between elements
           stress_jump(indx_permutted) = stress(1,my_dof_local,ie) - stress(1,ne_dof_local,ie_nghb)
          
           ! compute velocity jump in the normal direction accross interface between elements 
           velocity_jump(indx_permutted) =  nx(indx_permutted)* (veloc(1,my_dof_local,ie) - veloc(1,ne_dof_local,ie_nghb)) &
                                          + ny(indx_permutted)* (veloc(2,my_dof_local,ie) - veloc(2,ne_dof_local,ie_nghb)) &
                                          + nz(indx_permutted)* (veloc(3,my_dof_local,ie) - veloc(3,ne_dof_local,ie_nghb))
        
           !! precompute terms for optimization
           vector1(indx_permutted) = -velocity_jump(indx_permutted) - TauP(indx_permutted) *stress_jump(indx_permutted)
           vector2(indx_permutted) = -stress_jump(indx_permutted)   - TauV(indx_permutted) *velocity_jump(indx_permutted)
        end do
        
     else  ! may be free surface 

        if (tagged_face)  then

           do l=1,npf  !! loop over our face

              !! next dof
              indx =indx + 1

              !! new order to consider in local matrices
              indx_permutted = l + npf*(iface_1 - 1) 

              !! retrieve dof numerotation
              idof_local=ref_dof(k)%Ftodof(l,ifacref) 
              idof=Etodof_adj(ie) + idof_local - 1 

              !! outward normal
              nx(indx_permutted)=normal(1,idof, ifacref)
              ny(indx_permutted)=normal(2,idof, ifacref)
              nz(indx_permutted)=normal(3,idof, ifacref)
              
              !! SURFACE of ifacref
              Jface(indx_permutted) = 0.5_fp * Jacobian_2D(idof,ifacref) / weight_vol(idof) 
              
              !! physical parameters 
              TauV(indx_permutted)= 0.5_fp * (rho(ie)*vp(ie) + rho(ie)*vp(ie))  
              TauP(indx_permutted)= 1._fp / TauV(indx_permutted)
              
              
              !!!!! STRUCTURE
              my_dof_local = ref_dof(k)%Ftodof(l,ifacref)
             

              if (EtoFtag(ifacref,ie)==-1) then !! free surface 
                 
                 !! stress jump for free surface
                 stress_jump(indx_permutted) = 2._fp*stress(1,my_dof_local,ie)
              
                 !! velocity jump for free surface 
                 velocity_jump(indx_permutted) = 0._fp

                 !! precompute terms for optimization
                 vector1(indx_permutted) = -velocity_jump(indx_permutted) -TauP(indx_permutted) *stress_jump(indx_permutted)
                 vector2(indx_permutted) = -stress_jump(indx_permutted)   -TauV(indx_permutted) *velocity_jump(indx_permutted)

              else if (EtoFtag(ifacref,ie)== 1) then ! absorbing flux
                
                 stress_jump(indx_permutted) = stress(1,my_dof_local,ie)
                 velocity_jump(indx_permutted) = nx(indx_permutted)* (veloc(1,my_dof_local,ie)) &
                                               + ny(indx_permutted)* (veloc(2,my_dof_local,ie)) &
                                               + nz(indx_permutted)* (veloc(3,my_dof_local,ie))

                 !! precompute terms for optimization
                 vector1(indx_permutted) = -velocity_jump(indx_permutted)-TauP(indx_permutted) *stress_jump(indx_permutted)
                 vector2(indx_permutted) = -stress_jump(indx_permutted)-TauV(indx_permutted) *velocity_jump(indx_permutted)

              else 
                 write(*,*) 'warning tagged face not used'

              end if
              
           end do

        end if  

     end if

  end do



end subroutine acoustic_field_jump

!--------------------------------------------------------------------------------
subroutine compute_acoustic_upwind_flux_working_copy(ie, np, npf)

  ! compute upwind flux accross boundary

  use global_parameters_mod
  implicit none
  integer, intent(in) :: ie, np, npf
  integer  :: idof_global, idof_face
  integer  :: npf4
  real(kind=fp) :: kappa, inv_rho

  !! working arrays
  integer i,j

  kappa = rho(ie)*vp(ie)*vp(ie)
  inv_rho = 1._fp /rho(ie)
  npf4 = 4* npf

  !! upwind flux 
  stress_rhs(:,:, ie)=0._fp
  veloc_rhs(:,:, ie)=0._fp

  do idof=1, np
    do idof_face = 1, npf4
      stress_rhs(1,idof,ie) = stress_rhs(1,idof, ie) &
      &                     + kappa  * Lift(idof, idof_face) * Jface(idof_face)*  vector1(idof_face) !(-velocity_jump(idof_face) - TauP(idof_face)* stress_jump(idof_face))
      veloc_rhs(1,idof, ie) = veloc_rhs(1,idof, ie)  &
      &                     + inv_rho* Lift(idof, idof_face) * Jface(idof_face)*nx(idof_face) *vector2(idof_face) !(-stress_jump(idof_face)  -TauV(idof_face) * velocity_jump(idof_face))
      veloc_rhs(2,idof, ie) = veloc_rhs(2,idof, ie)  &
      &                     + inv_rho* Lift(idof, idof_face) * Jface(idof_face)*ny(idof_face) *vector2(idof_face) !(-stress_jump(idof_face)  -TauV(idof_face) * velocity_jump(idof_face))
      veloc_rhs(3,idof, ie) = veloc_rhs(3,idof, ie)  &
      &                     + inv_rho* Lift(idof, idof_face) * Jface(idof_face)*nz(idof_face) *vector2(idof_face) !(-stress_jump(idof_face)  -TauV(idof_face) * velocity_jump(idof_face))     
    end do
  end do


end subroutine compute_acoustic_upwind_flux_working_copy

!!-------------------------------------------------------------------------------

subroutine compute_acoustic_upwind_flux(ie, np, npf)

  ! compute upwind flux accross boundary

  use global_parameters_mod 
  implicit none
  integer  :: ie, np, npf
  integer  :: idof_global, idof_face



  !! upwind flux on stress : Dt_P = Div(V) + Flux(V,P)
  wksp(:)=0._fp
  do idof=1, np
     do idof_face = 1, 4* npf 
        Wksp(idof) = wksp(idof) + Lift(idof, idof_face) * Jface(idof_face) * (-velocity_jump(idof_face) &
        &          - TauP(idof_face)* stress_jump(idof_face))
     end do
  end do
  !! store stress rhs
  do idof=1, np
     stress_rhs(1,idof, ie) =  wksp(idof) *  rho(ie)*vp(ie)*vp(ie)
  end do


  !! upwind flux on Vx : Dt_Vx = Dx_P + flux(V,P)
  wksp(:)=0._fp
  do idof=1, np
     do idof_face = 1, 4* npf
        Wksp(idof) = wksp(idof) + Lift(idof, idof_face) *  Jface(idof_face)* nx(idof_face) * (-stress_jump(idof_face)  &
        &          -TauV(idof_face) * velocity_jump(idof_face))
     end do
  end do
  !! store veloc X rhs
  do idof=1, np
     veloc_rhs(1,idof, ie) = wksp(idof) / rho(ie) 
  end do


  !! upwind flux on Vy : Dt_Vy = Dy_P + flux(V,P)
  wksp(:)=0._fp
  do idof=1, np
     do idof_face = 1, 4* npf 
         Wksp(idof) = wksp(idof) + Lift(idof, idof_face) *  Jface(idof_face)* ny(idof_face) * (-stress_jump(idof_face)  &
         &          -TauV(idof_face) * velocity_jump(idof_face))
     end do
  end do
  !! store veloc Y rhs
  do idof=1, np
     veloc_rhs(2,idof, ie) =  wksp(idof) / rho(ie) 
  end do



  !! flux on Vz : Dt_Vz = Dz_P + flux(V,P)
  wksp(:)=0._fp
  do idof=1, np
     do idof_face = 1, 4* npf 
        Wksp(idof) = wksp(idof) + Lift(idof, idof_face) *  Jface(idof_face)* nz(idof_face) * (-stress_jump(idof_face)  &
        &          -TauV(idof_face) * velocity_jump(idof_face))
     end do
  end do
  !! store veloc Z rhs
  do idof=1, np
     veloc_rhs(3,idof, ie) =  wksp(idof) / rho(ie) 
  end do


end subroutine compute_acoustic_upwind_flux
!---------------------------------------------------------------------------------------------------
subroutine compute_acoustic_derivative_working_copy(ie, np)

! compute spatial derivatves of fields involved in acoustic wave equation

  use global_parameters_mod
  implicit none
  integer    :: ie, np
  integer    :: jdof
  real(kind=fp)  :: kappa, inv_rho

  kappa=rho(ie)*vp(ie)*vp(ie)
  inv_rho=1._fp/rho(ie)


 
  do idof = 1, np
     do jdof = 1, np
        stress_rhs(1,idof, ie) = stress_rhs(1,idof, ie) + kappa*(Dr_x(idof, jdof) *veloc(1,jdof,ie) &
        &                      +  Dr_y(idof, jdof) *  veloc(2,jdof,ie) +  Dr_z(idof, jdof) * veloc(3,jdof,ie))
        veloc_rhs(1,idof, ie) =  veloc_rhs(1,idof, ie)  + inv_rho*Dr_x(idof, jdof) * stress(1,jdof,ie)
        veloc_rhs(2,idof, ie) =  veloc_rhs(2,idof, ie)  + inv_rho*Dr_y(idof, jdof) * stress(1,jdof,ie)
        veloc_rhs(3,idof, ie) =  veloc_rhs(3,idof, ie)  + inv_rho*Dr_z(idof, jdof) * stress(1,jdof,ie)
     end do
  end do
 

end subroutine compute_acoustic_derivative_working_copy
!---------------------------------------------------------------------------------------------------

subroutine compute_acoustic_derivative(ie, np)

! compute spatial derivatves of fields involved in acoustic wave equation
 
  use global_parameters_mod
  implicit none
  integer   ,intent(in) :: ie, np
  integer    :: jdof
  real(kind=fp) :: kappa, inv_rho

  kappa=rho(ie)*vp(ie)*vp(ie)
  inv_rho =  1._fp / rho(ie)

  ! Dt_P = div(V) + flux(V,P)
  wksp(:)=0._fp
  do idof = 1, np
     do jdof = 1, np
        Wksp(idof) = wksp(idof) + (Dr_x(idof, jdof) * veloc(1,jdof,ie) &
        & +  Dr_y(idof, jdof) *  veloc(2,jdof,ie) +  Dr_z(idof, jdof) *  veloc(3,jdof,ie))
     end do
  end do
  !! update rhs stress
  do idof=1, np
     stress_rhs(1,idof, ie) =  stress_rhs(1,idof, ie) + kappa * wksp(idof)
  end do


  !! Dt_Vx = Dx_P + flux(V,P)
  wksp(:)=0._fp   
  do idof = 1, np
     do jdof = 1, np
        Wksp(idof) = wksp(idof) + Dr_x(idof, jdof) * stress(1,jdof,ie)
     end do
  end do
  !! update rhs velocity X
  do idof=1, np
     veloc_rhs(1,idof, ie) =  veloc_rhs(1,idof, ie) + inv_rho * wksp(idof)
  end do


  !! Dt_Vy = Dy_P + flux(V,P)
  wksp(:)=0._fp
  do idof = 1, np
     do jdof = 1, np
        Wksp(idof) = wksp(idof) + Dr_y(idof, jdof) * stress(1,jdof,ie)
     end do
  end do
  !! update rhs velocity Y
  do idof=1, np
     veloc_rhs(2,idof, ie) =  veloc_rhs(2,idof, ie) + inv_rho * wksp(idof)
  end do


  !! Dt_Vz = Dz_P + flux(V,P)
  wksp(:)=0._fp
  do idof = 1, np
     do jdof = 1, np
        Wksp(idof) = wksp(idof) + Dr_z(idof, jdof) * stress(1,jdof,ie) 
     end do
  end do  
  !! updated rhs velocity Y 
  do idof=1, np
     veloc_rhs(3,idof, ie) =  veloc_rhs(3,idof, ie) + inv_rho * wksp(idof)
  end do

end subroutine compute_acoustic_derivative
