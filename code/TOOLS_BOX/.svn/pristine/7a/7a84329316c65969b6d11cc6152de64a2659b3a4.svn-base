How to build checkpointing library :

************** With cmake compilation tool chain *****************

Set the compiler options you want by editing one of the existing cmake scripts
(as cmake_intel.sh or cmake_gnu.sh) or create your own script

Create a folder for compilation

  CHECK_POINTING> mkdir build; cd build

Launch cmake to create a Makefile within parameters set in the script file

  build> sh ../cmake_intel.sh
  
If cmake configuration/generation fails :
  
  proceed to manual configuration and generation of cmake 
  build> ccmake .
  set options CMAKE_Fortran/CXX_COMPILER, CMAKE_Fortran/CXX_FFLAGS
  configure, generate and quit

If cmake configuration and generation succeeds, proceed to the compilation :
  
  build> make clean && make && make install

Then checkpointing static and shared libraries and the associated .mod files are generated in lib[_suffix]

*********************** Without cmake *****************************

If you encounter problem to build the library, a make file is 
committed and updated by hand in build_mk directory
The compiler options are set in CHECK_POINTING/../Makefile.inc

  CHECK_POINTING> cd build_mk; make clean && make all

or for gnu compilers

  CHECK_POINTING> cd build_mk; make clean && make GNU=1 all

************ Executing test_revolve_binomial **********************

test_revolve_binomial is a main Fortran program
calling C++ checkpointing (offline mode) library

  CHECK_POINTING> cd test; sh run_test_revolve_binomial.sh
