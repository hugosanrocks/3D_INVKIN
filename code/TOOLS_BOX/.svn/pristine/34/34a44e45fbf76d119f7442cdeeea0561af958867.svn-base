!  3D 4th order FD for wavefield reconstruction in non-attenuating medium
!
!!$  Copyright (C) 2015 University Joseph Fourier, Grencle (Pengliang Yang)
!!$
!!$ References: 
!!$[1] P. Yang and R. Brossier and L. M\'etivier and J. Virieux, Checkpointing
!!$    assisted Reverse Forward Simulation: an optimal recomputation method for 
!!$    FWI and RTM, Expanded Abstracts, 78$^{th}$ Annual EAGE Meeting (Vienna),
!!$    2016
!!$[2] Yang, P., Brossier, R., and Virieux, J. (2016b). Wavefield reconstruction
!!$    from significantly decimated boundaries. Geophysics, page submitted.
!!$[3] Yang, P., Gao, J., and Wang, B. (2014a). RTM using effective boundary 
!!$    saving: A staggered grid GPU implementation. Computers & Geosciences,
!!$    68:64–72.
!!$[4] Yang, P., Gao, J., and Wang, B. (2015). A graphics processing unit 
!!$    implementation of time-domain full-waveform inversion. Geophysics, 
!!$    80(3):F31–F39.
!!$[5] Yang, P., Wang, B., and Gao, J. (2014b). Using the effective boundary 
!!$    saving strategy in GPU-based RTM programming. In SEG technical program 
!!$    expanded abstracts 2014. Society of Exploration Geophysicists.
!------------------------------------------------------------------------------
! check the CFL/stability condition is satisfied or not
subroutine check_sanity(vpmax,dt,dz,dx,dy)
  implicit none

  real::vpmax,dt,dx,dz,dy
  real CFL

  CFL=vpmax*dt/max(dz,dx,dy)*sqrt(3.)*7./6.

  if (CFL>=1) then 
     write(0,*)'do NOT satisfy CFL condition'
     call exit(0)
  else
     write(0,*)'CFL=',CFL
  endif
end subroutine check_sanity

!------------------------------------------------------------------------------
! expand the model with artificial boundaries
subroutine expand3d(tgt, src, nz, nx, ny, nb)
  implicit none

  integer::i1,i2,i3
  integer::nz,nx,ny,nb,nzpad,nxpad,nypad
  real::tgt(nz+2*nb,nx+2*nb,ny+2*nb),src(nz,nx,ny)

  nzpad=nz+2*nb
  nxpad=nx+2*nb
  nypad=ny+2*nb

  !first copy from source to inner part of target
  do i3=1,ny
     do i2=1,nx
        do i1=1,nz
           tgt(i1+nb,i2+nb,i3+nb)=src(i1,i2,i3)
        enddo
     enddo
  enddo
  !then pad the boundaries
  do i3=1,nypad
     do i2=1,nxpad
        do i1=1,nb
           tgt(i1,i2,i3)=tgt(nb+1,i2,i3)
           tgt(i1+nz+nb,i2,i3)=tgt(nz+nb,i2,i3)
        enddo
     enddo
  enddo
  do i3=1,nypad
     do i2=1,nb
        do i1=1,nzpad
           tgt(i1,i2,i3)=tgt(i1,nb+1,i3)
           tgt(i1,i2+nx+nb,i3)=tgt(i1,nx+nb,i3)
        enddo
     enddo
  enddo
  do i3=1,nb
     do i2=1,nxpad
        do i1=1,nzpad
           tgt(i1,i2,i3)=tgt(i1,i2,nb+1)
           tgt(i1,i2,i3+ny+nb)=tgt(i1,i2,ny+nb)
        enddo
     enddo
  enddo
end subroutine expand3d

!------------------------------------------------------------------------------
!window the inner part from the expanded model
!the source is assumed to be larger in size than the target
subroutine window3d(tgt, src, nz, nx, ny, nb)
  implicit none

  integer::i1, i2, i3, nz, nx, ny, nb
  real::src(nz+2*nb,nx+2*nb,ny+2*nb),tgt(nz,nx,ny)
  do i3=1,ny
     do i2=1,nx
        do i1=1,nz
           tgt(i1,i2,i3)=src(i1+nb,i2+nb,i3+nb)
        enddo
     enddo
  enddo
end subroutine window3d

!-------------------------------------------------------------------------------
subroutine step_forward_v(p, vz, vx, vy, rho, dt, idz, idx, idy, nzpad, nxpad, nypad)
  implicit none

  integer::i1, i2, i3
  real::diff1,diff2,diff3

  integer:: nzpad, nxpad, nypad
  real::idz,idx,idy, dt
  real,dimension(nzpad,nxpad,nypad)::p, vz, vx, vy, rho

  real,parameter::c1=1.125
  real,parameter::c2=-1./24.

  do i3=2,nypad-2
     do i2=2,nxpad-2
        do i1=2,nzpad-2
           diff1=c1*(p(i1+1,i2,i3)-p(i1,i2,i3))&
                +c2*(p(i1+2,i2,i3)-p(i1-1,i2,i3))
           diff2=c1*(p(i1,i2+1,i3)-p(i1,i2,i3))&
                +c2*(p(i1,i2+2,i3)-p(i1,i2-1,i3))
           diff3=c1*(p(i1,i2,i3+1)-p(i1,i2,i3))&
                +c2*(p(i1,i2,i3+2)-p(i1,i2,i3-1))
           vz(i1,i2,i3)=vz(i1,i2,i3)-dt*idz*diff1/rho(i1,i2,i3)
           vx(i1,i2,i3)=vx(i1,i2,i3)-dt*idx*diff2/rho(i1,i2,i3)
           vy(i1,i2,i3)=vy(i1,i2,i3)-dt*idy*diff3/rho(i1,i2,i3)
        enddo
     enddo
  enddo
end subroutine step_forward_v

!------------------------------------------------------------------------------
subroutine step_forward_p(p, vz, vx, vy, kappa, dt, idz, idx, idy, nzpad, nxpad, nypad)
  implicit none

  integer::i1, i2,i3
  real::diff1,diff2,diff3

  integer:: nzpad, nxpad, nypad
  real::idz,idx,idy,dt
  real,dimension(nzpad,nxpad,nypad)::p, vz, vx, vy, kappa

  real,parameter::c1=1.125
  real,parameter::c2=-1./24.

  do i3=3,nzpad-1
     do i2=3,nxpad-1
        do i1=3,nzpad-1
           diff1=c1*(vz(i1,i2,i3)-vz(i1-1,i2,i3))&
                +c2*(vz(i1+1,i2,i3)-vz(i1-2,i2,i3))
           diff2=c1*(vx(i1,i2,i3)-vx(i1,i2-1,i3))&
                +c2*(vx(i1,i2+1,i3)-vx(i1,i2-2,i3))
           diff3=c1*(vy(i1,i2,i3)-vy(i1,i2,i3-1))&
                +c2*(vy(i1,i2,i3+1)-vy(i1,i2,i3-2))
           p(i1,i2,i3)=p(i1,i2,i3)-dt*kappa(i1,i2,i3)*(idz*diff1+idx*diff2+idy*diff3)
        enddo
     enddo
  enddo
end subroutine step_forward_p

!------------------------------------------------------------------------------
! initialize PML damping profile
subroutine cpmlcoeff_init(bb,aa,vpmax,dx,dt,fm,nb)
  implicit none

  integer::nb
  real::dt,fm,dx,vpmax
  real,dimension(nb)::bb,aa

  integer::ib
  real::x,L,d0,d,alpha_max,alpha,r
  real,parameter::Rc=1.e-4

  L=nb*dx
  d0=-3.*log(Rc)*vpmax/(2.*L)
!  alpha_max=4.*atan(1.)*fm
  alpha_max=0.

  do ib=1,nb
     x=(nb-ib+1)*dx     !x=1.-cos(0.5*(nb-ib)*PI/nb)
     r=x/L ! ratio of x over L
     d=d0*r**2; alpha=alpha_max*r
     bb(ib)=exp(-(d+alpha)*dt)
     aa(ib)=d*(bb(ib)-1.)/(d+alpha)
  enddo
end subroutine cpmlcoeff_init


!-------------------------------------------------------------------------------
subroutine apply_sponge3d(p,bndr,nz,nx,ny,nb)
  implicit none

  integer::nb,nz,nx,ny
  real,dimension(nb)::bndr
  real,dimension(nz+2*nb,nx+2*nb,ny+2*nb)::p

  integer::i1,i2,i3,nzpad,nxpad,nypad
  nzpad=nz+2*nb
  nxpad=nx+2*nb
  nypad=ny+2*nb

  do i3=1,nypad
     do i2=1,nxpad
        do i1=1,nb !top
           p(i1,i2,i3)=bndr(i1)*p(i1,i2,i3)
        enddo
        do i1=nz+nb+1,nzpad !bottom
           p(i1,i2,i3)=bndr(nzpad-i1+1)*p(i1,i2,i3)
        enddo
     enddo
  enddo
  do i3=1,nypad
     do i1=1,nzpad
        do i2=1,nb !left
           p(i1,i2,i3)=bndr(i2)*p(i1,i2,i3)
        enddo
        do i2=nb+nx+1,nxpad !right
           p(i1,i2,i3)=bndr(nxpad-i2+1)*p(i1,i2,i3)
        enddo
     enddo
  enddo
  do i2=1,nxpad
     do i1=1,nzpad
        do i3=1,nb !front
           p(i1,i2,i3)=bndr(i3)*p(i1,i2,i3)
        enddo
        do i3=nb+nx+1,nypad !rear
           p(i1,i2,i3)=bndr(nypad-i3+1)*p(i1,i2,i3)
        enddo
     enddo
  enddo
end subroutine apply_sponge3d

!------------------------------------------------------------------------------
subroutine update_cpml_vzvxvy(p, vz, vx, vy, conv_pz, conv_px, conv_py, rho, bb, aa, idz, idx, idy, dt, nz, nx, ny, nb)
  implicit none

  integer::nz,nx,ny,nb
  real::idz,idx,idy,dt
  real,dimension(nb)::bb,aa
  real,dimension(nz+2*nb,nx+2*nb,ny+2*nb)::p,vz,vx,vy,rho
  real::conv_pz(nb,nx+2*nb,ny+2*nb,2),conv_px(nz+2*nb,nb,ny+2*nb,2),conv_py(nz+2*nb,nx+2*nb,nb,2)

  integer::nzpad,nxpad,nypad,i1,i2,i3,ib
  real*8::diff1,diff2,diff3

  real,parameter::c1=1.125
  real,parameter::c2=-1./24.

  nzpad=nz+2*nb
  nxpad=nx+2*nb
  nypad=ny+2*nb

  !update conv_pz,vz
  do i3=1,nypad
     do i2=1,nxpad
        do i1=2,nb !top
           diff1=c1*(p(i1+1,i2,i3)-p(i1,i2,i3)) &
                +c2*(p(i1+2,i2,i3)-p(i1-1,i2,i3))
           conv_pz(i1,i2,i3,1)=bb(i1)*conv_pz(i1,i2,i3,1)+aa(i1)*diff1*idz
           vz(i1,i2,i3)=vz(i1,i2,i3)-dt*conv_pz(i1,i2,i3,1)/rho(i1,i2,i3)
        enddo
        do i1=nz+nb+1,nzpad-2 !bottom
           ib=nzpad-i1+1
           diff1=c1*(p(i1+1,i2,i3)-p(i1,i2,i3)) &
                +c2*(p(i1+2,i2,i3)-p(i1-1,i2,i3))
           conv_pz(ib,i2,i3,2)=bb(ib)*conv_pz(ib,i2,i3,2)+aa(ib)*diff1*idz
           vz(i1,i2,i3)=vz(i1,i2,i3)-dt*conv_pz(ib,i2,i3,2)/rho(i1,i2,i3)
        enddo
     enddo
  enddo
  !update conv_px,vx
  do i3=1,nypad
     do i1=1,nzpad
        do i2=2,nb !left
           diff2=c1*(p(i1,i2+1,i3)-p(i1,i2,i3))&
                +c2*(p(i1,i2+2,i3)-p(i1,i2-1,i3)) 
           conv_px(i1,i2,i3,1)=bb(i2)*conv_px(i1,i2,i3,1)+aa(i2)*diff2*idx
           vx(i1,i2,i3)=vx(i1,i2,i3)-dt*conv_px(i1,i2,i3,1)/rho(i1,i2,i3)
        enddo
        do i2=nx+nb+1,nxpad-2 !right
           ib=nxpad-i2+1
           diff2=c1*(p(i1,i2+1,i3)-p(i1,i2,i3)) &
                +c2*(p(i1,i2+2,i3)-p(i1,i2-1,i3))
           conv_px(i1,ib,i3,2)=bb(ib)*conv_px(i1,ib,i3,2)+aa(ib)*diff2*idx
           vx(i1,i2,i3)=vx(i1,i2,i3)-dt*conv_px(i1,ib,i3,2)/rho(i1,i2,i3)
        enddo
     enddo
  enddo
  !update conv_py,vy
  do i2=1,nxpad
     do i1=1,nzpad
        do i3=2,nb
           diff3=c1*(p(i1,i2,i3+1)-p(i1,i2,i3))&
                +c2*(p(i1,i2,i3+2)-p(i1,i2,i3-1))
           conv_py(i1,i2,i3,1)=bb(i3)*conv_py(i1,i2,i3,1)+aa(i3)*diff3*idy
           vy(i1,i2,i3)=vy(i1,i2,i3)-dt*conv_py(i1,i2,i3,1)/rho(i1,i2,i3)
        enddo
        do i3=ny+nb+1,nypad-2
           ib=nypad-i3+1
           diff3=c1*(p(i1,i2,i3+1)-p(i1,i2,i3))&
                +c2*(p(i1,i2,i3+2)-p(i1,i2,i3-1))
           conv_py(i1,i2,ib,2)=bb(ib)*conv_py(i1,i2,ib,2)+aa(ib)*diff3*idy
           vy(i1,i2,i3)=vy(i1,i2,i3)-dt*conv_py(i1,i2,ib,2)/rho(i1,i2,i3)
        enddo
     enddo
  enddo
end subroutine update_cpml_vzvxvy

!------------------------------------------------------------------------------
subroutine update_cpml_pzpxpy(p, vz, vx, vy, conv_vz, conv_vx, conv_vy, kappa, bb, aa, idz, idx, idy, dt, nz, nx, ny, nb)
  implicit none

  integer::nz,nx,ny,nb
  real::idz,idx,idy,dt
  real,dimension(nb)::bb,aa
  real,dimension(nz+2*nb,nx+2*nb,ny+2*nb)::p,vz,vx,vy,kappa
  real::conv_vz(nb,nx+2*nb,ny+2*nb,2),conv_vx(nz+2*nb,nb,ny+2*nb,2),conv_vy(nz+2*nb,nx+2*nb,nb,2)

  integer::i1,i2,i3,ib,nzpad,nxpad,nypad
  real*8::diff1,diff2,diff3

  real,parameter::c1=1.125
  real,parameter::c2=-1./24.

  nzpad=nz+2*nb
  nxpad=nx+2*nb
  nypad=ny+2*nb

  !update conv_vz,p
  do i3=1,nypad
     do i2=1,nxpad
        do i1=3,nb !top
           diff1=c1*(vz(i1,i2,i3)-vz(i1-1,i2,i3))&
                +c2*(vz(i1+1,i2,i3)-vz(i1-2,i2,i3))
           conv_vz(i1,i2,i3,1)=bb(i1)*conv_vz(i1,i2,i3,1)+aa(i1)*diff1*idz
           p(i1,i2,i3)=p(i1,i2,i3)-dt*kappa(i1,i2,i3)*conv_vz(i1,i2,i3,1)
        enddo
        do i1=nz+nb+1,nzpad-1 !bottom
           ib=nzpad-i1+1
           diff1=c1*(vz(i1,i2,i3)-vz(i1-1,i2,i3))&
                +c2*(vz(i1+1,i2,i3)-vz(i1-2,i2,i3))
           conv_vz(ib,i2,i3,2)=bb(ib)*conv_vz(ib,i2,i3,2)+aa(ib)*diff1*idz
           p(i1,i2,i3)=p(i1,i2,i3)-dt*kappa(i1,i2,i3)*conv_vz(ib,i2,i3,2)
        enddo
     enddo
  enddo
  !update conv_vx,p
  do i3=1,nypad
     do i1=1,nzpad
        do i2=3,nb !left
           diff2=c1*(vx(i1,i2,i3)-vx(i1,i2-1,i3))&
                +c2*(vx(i1,i2+1,i3)-vx(i1,i2-2,i3))
           conv_vx(i1,i2,i3,1)=bb(i2)*conv_vx(i1,i2,i3,1)+aa(i2)*diff2*idx
           p(i1,i2,i3)=p(i1,i2,i3)-dt*kappa(i1,i2,i3)*conv_vx(i1,i2,i3,1)
        enddo
        do i2=nx+nb+1,nxpad-1 !right
           ib=nxpad-i2+1
           diff2=c1*(vx(i1,i2,i3)-vx(i1,i2-1,i3))&
                +c2*(vx(i1,i2+1,i3)-vx(i1,i2-2,i3))
           conv_vx(i1,ib,i3,2)=bb(ib)*conv_vx(i1,ib,i3,2)+aa(ib)*diff2*idx
           p(i1,i2,i3)=p(i1,i2,i3)-dt*kappa(i1,i2,i3)*conv_vx(i1,ib,i3,2)
        enddo
     enddo
  enddo
  !update conv_vy,p
  do i2=1,nxpad
     do i1=1,nzpad
        do i3=3,nb
           diff3=c1*(vy(i1,i2,i3)-vy(i1,i2,i3-1))&
                +c2*(vy(i1,i2,i3+1)-vy(i1,i2,i3-2))
           conv_vy(i1,i2,i3,1)=bb(i3)*conv_vy(i1,i2,i3,1)+aa(i3)*diff3*idy
           p(i1,i2,i3)=p(i1,i2,i3)-dt*kappa(i1,i2,i3)*conv_vy(i1,i2,i3,1)
        enddo
        do i3=ny+nb+1,nypad-1
           ib=nypad-i3+1
           diff3=c1*(vy(i1,i2,i3)-vy(i1,i2,i3-1))&
                +c2*(vy(i1,i2,i3+1)-vy(i1,i2,i3-2))
           conv_vy(i1,i2,ib,2)=bb(ib)*conv_vy(i1,i2,ib,2)+aa(ib)*diff3*idy
           p(i1,i2,i3)=p(i1,i2,i3)-dt*kappa(i1,i2,i3)*conv_vy(i1,i2,ib,2)
        enddo
     enddo
  enddo
end subroutine update_cpml_pzpxpy
!-------------------------------------------------------------------------------
subroutine add_sources(p, dt, wlt, sz, sx, sy,nzpad, nxpad, nypad)
  implicit none

  integer::sz,sx,sy,nzpad, nxpad,nypad
  real::dt,wlt
  real,dimension(nzpad, nxpad,nypad)::p

  p(sz,sx,sy)=p(sz,sx,sy)+dt*wlt
end subroutine add_sources

!-------------------------------------------------------------------------------
subroutine compute_energy(e,vz,vx,vy,p,rho,kappa,nz,nx,ny)
  implicit none

  integer::nz,nx,ny
  real::e
  real,dimension(nz,nx,ny)::rho,kappa,p,vz,vx,vy

  e=0.5*sum((vz**2+vx**2+vy**2)*rho+p**2/kappa)
end subroutine compute_energy
