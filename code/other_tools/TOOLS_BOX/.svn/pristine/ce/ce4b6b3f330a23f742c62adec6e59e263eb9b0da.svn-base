!
!!$  Copyright (C) 2016 University Joseph Fourier, Grencle (Pengliang Yang)
!!$
!!$ References: 
!!$[1] P. Yang and R. Brossier and L. Metivier and J. Virieux, Checkpointing
!!$    assisted Reverse Forward Simulation: an optimal recomputation method for 
!!$    FWI and RTM, Expanded Abstracts, 78$^{th}$ Annual EAGE Meeting (Vienna),
!!$    2016
!!$[2] Yang, P., Brossier, R., and Virieux, J. (2016b). Wavefield reconstruction
!!$    from significantly decimated boundaries. Geophysics, page submitted.
!!$[3] Yang, P., Gao, J., and Wang, B. (2014a). RTM using effective boundary 
!!$    saving: A staggered grid GPU implementation. Computers & Geosciences,
!!$    68:64–72.
!!$[4] Yang, P., Gao, J., and Wang, B. (2015). A graphics processing unit 
!!$    implementation of time-domain full-waveform inversion. Geophysics, 
!!$    80(3):F31–F39.
!!$[5] Yang, P., Wang, B., and Gao, J. (2014b). Using the effective boundary 
!!$    saving strategy in GPU-based RTM programming. In SEG technical program 
!!$    expanded abstracts 2014. Society of Exploration Geophysicists.
!----------------------------------------------------------------------------
subroutine checkpoint_positioning(p,l,c) 
  implicit none 
  integer::l,c,p(0:c-1)

  integer::r,i,j,beta0,beta1,beta2,beta3,beta4,beta5,ds
  if(l<0 .or. c<0) then
     write(0,*) "Error in input parameters: l or c"
     stop
  endif

  p(0)=0
  if(c>=2) then !more than 1 checkpoints including cp(ic)
     !given l and c, determine r: beta(c,r-1)< l <= beta(c,r)
     r=0; beta0=1
     do while (beta0<l)
        r=r+1; beta0=beta0*(r+c)/r 
     enddo
     do i=0,c-2
        !beta0=beta(c-i,r)
        beta0=1; ds=c-i
        do j=1,r
           beta0=beta0*(ds+j)/j
        enddo
        !beta1=beta(c-i,r-1)
        beta1=beta0*r/(ds+r)
        !beta5=beta(c-i-1,r-1)
        beta5=1
        if(ds>1) beta5=beta1*ds/(ds+r-1)
        !beta2=beta(c-i-2,r-1)
        if(ds==1) then
           beta2=0
        elseif (ds>2) then
           beta2=beta5*(ds-1)/(ds+r-2)
        else
           beta2=1
        endif
        !beta3=beta(c-i,r-2)
        beta3=beta5*(r-1)/ds
        !beta4=beta(c-i-3,r)
        if(ds<3) then
           beta4=0
        elseif(ds>3) then
           beta4=beta2*(ds-2)/r
        else
           beta4=1
        endif
        if(l<=beta1+beta2+p(i)) then
           p(i+1)=p(i)+beta3
        elseif (l>=beta0-beta4+p(i)) then
           p(i+1)=p(i)+beta1
        else
           p(i+1)=l-beta5-beta2
        endif
     enddo
  endif
end subroutine checkpoint_positioning

!---------------------------------------------------------------------------
subroutine checkpoint_relocate(verb,cpit,nc,ic,it)!set c=nc-ic, it=nt-1
  implicit none

  logical::verb
  integer::nc !total number of checkpoints
  integer::ic !the closest checkpoint prior to current time level-it
  integer::it !current time level
  integer::cpit(0:nc-1) !position of checkpoints in time coordinate

  integer::i,l,c,p(0:nc-ic-1)

  c=nc-ic ! the number of idle checkpoints posterior to time level-it
  if(ic==0) cpit(ic)=0 ! set the first checkpoint    
  if(verb) write(0,'(2(A,I4))') "cp[",ic,"] store it=", cpit(ic)

  l=it-cpit(ic)+1
  if(l>2.and.c>1) then
     call checkpoint_positioning(p,l,c) 
     do i=1,c-1
        if(p(i)>0) cpit(ic+i)=cpit(ic)+p(i)
        if(verb) write(0,'(2(A,I4))') "cp[",ic+i,"] store it=", cpit(ic+i)
     enddo
  endif
end subroutine checkpoint_relocate

!----------------------------------------------------------------------------
integer function checkpoint_steps(nt,nc)
  implicit none
  integer::nt,nc

  integer::r,beta

  r=0;beta=1
  do while (beta<nt)
     r=r+1
     beta=beta*(r+nc)/r
  enddo
  checkpoint_steps=beta
end function checkpoint_steps

!----------------------------------------------------------------------------
integer function checkpoint_r(nt,nc)
  implicit none
  integer::nt,nc

  integer::r,beta

  r=0;beta=1
  do while (beta<nt)
     r=r+1
     beta=beta*(r+nc)/r
  enddo
  checkpoint_r=r
end function checkpoint_r
