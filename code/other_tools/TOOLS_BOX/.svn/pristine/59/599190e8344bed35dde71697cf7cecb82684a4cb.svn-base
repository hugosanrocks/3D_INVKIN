!  Backward reconstruction based on DFT and inverse DFT
!
!!$  Copyright (C) 2015 University Joseph Fourier, Grenoble (Pengliang Yang)
!!$  
!!$ References: 
!!$[1] P. Yang and R. Brossier and L. Metivier and J. Virieux, Checkpointing
!!$    assisted Reverse Forward Simulation: an optimal recomputation method for 
!!$    FWI and RTM, Expanded Abstracts, 78$^{th}$ Annual EAGE Meeting (Vienna),
!!$    2016
!!$[2] Yang, P., Brossier, R., and Virieux, J. (2016b). Wavefield reconstruction
!!$    from significantly decimated boundaries. Geophysics, page submitted.
!!$[3] Yang, P., Gao, J., and Wang, B. (2014a). RTM using effective boundary 
!!$    saving: A staggered grid GPU implementation. Computers & Geosciences,
!!$    68:64–72.
!!$[4] Yang, P., Gao, J., and Wang, B. (2015). A graphics processing unit 
!!$    implementation of time-domain full-waveform inversion. Geophysics, 
!!$    80(3):F31–F39.
!!$[5] Yang, P., Wang, B., and Gao, J. (2014b). Using the effective boundary 
!!$    saving strategy in GPU-based RTM programming. In SEG technical program 
!!$    expanded abstracts 2014. Society of Exploration Geophysicists.
program dftinterp2
  implicit none

  integer :: it, nt, mt, nz, nx, nb, sx, sz, r
  integer :: xtr,ztr,kt,ierr
  real  :: dt, dz, dx, amp, fm, vpmax, tmp, idx, idz, dtb
  real, dimension (:),   allocatable :: wlt,bb,aa,ef,eb, trf, trb
  real, dimension (:,:), allocatable :: v0, vv, rho,kappa, eta
  real, dimension (:,:), allocatable :: p, vz, vx
  complex, dimension(:,:,:,:),allocatable::bvzt,bvzb,bvxl,bvxr


  ! Read/Write axes
  nz=301
  nx=301
  dz=5.
  dx=5.
  nb=25 ! number of boundary layers
  nt=1000
  dt=0.001
  dtb=4*dt
  amp=1. !maximum amplitude of ricker wavelet
  fm=20. !domainant freq for ricker wavelet
  xtr=100 !grid location of randomly extract a seismic trace
  ztr=100 !grid location of randomly extract a seismic trace
  kt=250


  idx=1./dx
  idz=1./dz
  sx=(nx+1)/2
  sz=(nz+1)/2
  r=nint(dtb/dt)
  if(mod(nt,r)==0) then
     write(0,*) 'store boundary every r-step: r=', r
     mt=nt/r !N=nt;M=mt; M=N/r
  else
     write(0,*) 'dt for boundary saving is chosen inappropriately.'
     call exit(0)
  endif

  allocate(wlt(nt))
  allocate(bb(nb))
  allocate(aa(nb))
  allocate(v0(nz,nx))
  allocate(vv(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(rho(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(kappa(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(p(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(vz(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(vx(-nb+1:nb+nz,-nb+1:nb+nx))
  allocate(bvzt(mt/2+1,-1:1,1:nx,1),stat=ierr)
  allocate(bvzb(mt/2+1,-1+nz:1+nz,1:nx,1),stat=ierr)
  allocate(bvxl(mt/2+1,1:nz,-1:1,1),stat=ierr)
  allocate(bvxr(mt/2+1,1:nz,-1+nx:1+nx,1),stat=ierr)
  if (ierr /= 0) then
     write(0,*) 'Error: Allocation failed!'
     call exit(0)
  endif
  allocate(ef(nt))
  allocate(eb(nt))
  allocate(trf(nt))
  allocate(trb(nt))

  !generate ricker wavelet with a delay
  do it=1,nt  
     tmp=3.1415926535897932*fm*(it*dt-1.0/fm)
     tmp=tmp*tmp
     wlt(it)=amp*(1.0-2.0*tmp)*exp(-tmp)
  enddo
  v0=2000.
  vpmax=maxval(v0)
  call check_sanity(vpmax,dt,dx,dz)
  call expand2d(vv, v0, nz, nx, nb)
  rho=1000.
  call expand2d(rho, v0, nz, nx, nb)
  call sponge_coeff(bb,vpmax,dx,dt,nb)
  kappa=rho*vv*vv
  p=0.
  vx=0.
  vz=0.
  !------------------------------------------------------------------!
  !initialize the allocated memory for DFT coefficients with zeros
  !------------------------------------------------------------------!
  bvxl=0.;bvxr=0.
  bvzt=0.;bvzb=0.
  trf=0.
  trb=0.
  ef=0.
  eb=0.


  !forward modeling
  do it=1,nt
     call add_sources(p, dt, wlt(it), sz, sx, nz,nx,nb)
     call step_forward_v(p, vz(:,:), vx(:,:), rho, dt, idz, idx, nz,nx,nb)
     call apply_sponge(vz(:,:),bb,nz,nx,nb)
     call apply_sponge(vx(:,:),bb,nz,nx,nb)
     call step_forward_p(p, vz(:,:), vx(:,:), kappa, dt, idz, idx, nz,nx,nb)
     call apply_sponge(p,bb,nz,nx,nb)
     !-----------------------------------------------------------------------!
     !decimation sampling: flag v2b=.true.
     !-----------------------------------------------------------------------!
     call dft_interp(.true.,bvzt,vz(-1:1,1:nx),-1,1,1,nx,1,1,nt,mt,it)
     call dft_interp(.true.,bvzb,vz(-1+nz:1+nz,1:nx),-1+nz,1+nz,1,nx,1,1,nt,mt,it)
     call dft_interp(.true.,bvxl,vx(1:nz,-1:1),1,nz,-1,1,1,1,nt,mt,it)
     call dft_interp(.true.,bvxr,vx(1:nz,-1+nx:1+nx),1,nz,-1+nx,1+nx,1,1,nt,mt,it)

     trf(it)=p(ztr,xtr)
     call compute_energy(ef(it),vz(1:nz,1:nx),vx(1:nz,1:nx),p(1:nz,1:nx),&
          rho(1:nz,1:nx),kappa(1:nz,1:nx),nz,nx)

     if(it==kt) then
        call window2d(v0, p, nz, nx, nb)
        open(10,file='forward_kt.bin',access='direct',recl=4*nz*nx,status='replace')
        write(10,rec=1) v0
        close(10)
     endif
  enddo
  open(10,file='ef.bin',access='direct',recl=4*nt,status='replace')
  write(10,rec=1) ef
  close(10)
  open(10,file='trf.bin',access='direct',recl=4*nt,status='replace')
  write(10,rec=1) trf
  close(10)


  !backward reconstruction
  do it=nt,1,-1
     !----------------------------------------------------------------------!
     !reconstruct wavefield boundaries by DFT interpolation: flag v2b=.fasle.
     !----------------------------------------------------------------------!
     call dft_interp(.false.,bvzt,vz(-1:1,1:nx),-1,1,1,nx,1,1,nt,mt,it)
     call dft_interp(.false.,bvzb,vz(-1+nz:1+nz,1:nx),-1+nz,1+nz,1,nx,1,1,nt,mt,it)
     call dft_interp(.false.,bvxl,vx(1:nz,-1:1),1,nz,-1,1,1,1,nt,mt,it)
     call dft_interp(.false.,bvxr,vx(1:nz,-1+nx:1+nx),1,nz,-1+nx,1+nx,1,1,nt,mt,it)

     trb(it)=p(ztr,xtr)
     call compute_energy(eb(it),vz(1:nz,1:nx),vx(1:nz,1:nx),p(1:nz,1:nx),&
          rho(1:nz,1:nx),kappa(1:nz,1:nx),nz,nx)

     if(it==kt) then
     	call window2d(v0, p, nz, nx, nb)
        open(10,file='reconstructed_kt.bin',access='direct',recl=4*nz*nx,status='replace')
        write(10,rec=1) v0
        close(10)
     endif

     call step_forward_p(p, vz(:,:), vx(:,:), kappa, -dt, idz, idx, nz,nx,nb)
     call step_forward_v(p, vz(:,:), vx(:,:), rho, -dt, idz, idx, nz,nx,nb)
     call add_sources(p, -dt, wlt(it), sz, sx, nz,nx,nb)
  enddo
  open(10,file='eb.bin',access='direct',recl=4*nt,status='replace')
  write(10,rec=1) eb
  close(10)
  open(10,file='trb.bin',access='direct',recl=4*nt,status='replace')
  write(10,rec=1) trb
  close(10)


  deallocate(wlt)
  deallocate(bb)
  deallocate(aa)
  deallocate(ef)
  deallocate(eb)
  deallocate(v0)
  deallocate(vv)
  deallocate(rho)
  deallocate(kappa)
  deallocate(p)
  deallocate(vz)
  deallocate(vx)  
  deallocate(bvzt)
  deallocate(bvzb)
  deallocate(bvxl)
  deallocate(bvxr)
  deallocate(trf)
  deallocate(trb)

  call exit(0)
end program dftinterp2


